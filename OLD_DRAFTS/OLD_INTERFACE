resources
    Registry
        func GetResourceTypeNames() []string
        func IsGroupResource(name string) bool
        func RegisterGroupResource(resourceType, groupResourceType reflect.Type)
        func RegisterSingleResource(singleResourceType reflect.Type)
    type Resource interface
        -- Registry
        func GetResourceByTypeName(name string) Resource
        -- Interface
        Validate() error
        -- Extra
        func GetResourceAbsent(resource Resource) bool
        func GetResourceId(resource Resource) string
        func GetResourceTypeId(resource Resource) string
        func GetResourceTypeName(resource Resource) string
        func GetResourceYaml(resource Resource) string
        func NewResourceWithSameId(resource Resource) Resource
        func Satisfies(a, b Resource) bool
        func SetResourceAbsent(resource Resource) Resource
        func ValidateResource(resource Resource) error
        var HashResource = func(resource Resource) string
    type SingleResource interface
        -- Registry
        func GetSingleResourceByTypeName(name string) SingleResource
        -- Interface
    	Resource
    	Load(context.Context, types.Host) error
    	Resolve(context.Context, types.Host) error
    	Apply(context.Context, types.Host) error
    type GroupResource interface
        -- New
        func GetGroupResourceByTypeName(name string) GroupResource
        -- Interface
    	Load(context.Context, types.Host, Resources) error
    	Resolve(context.Context, types.Host, Resources) error
    	Apply(context.Context, types.Host, Resources) error
    	-- Extra
    	func GetGroupResourceTypeName(groupResource GroupResource) string
    type Satisfiable interface
        -- Interface
        Satisfies(resource Resource) bool
    type ResourceMap map[string]map[string]Resource
        -- New
        func NewResourceMap(resources Resources) ResourceMap
        -- Type
        func (m ResourceMap) GetResourceWithSameTypeId(resource Resource) Resource
        func (m ResourceMap) HasResourceWithSameTypeId(resource Resource) bool
    type Resources []Resource
        -- New
        func LoadPath(ctx context.Context, path string) (Resources, error)
        func NewResourcesWithSameIds(resources Resources) Resources
        -- Type
        func (r Resources) Ids() string
        func (r Resources) MarshalYAML() (any, error)
        func (r *Resources) UnmarshalYAML(node *yaml.Node) error
        func (r Resources) Validate() error
        -- Extra
        func GetResourcesYaml(resources Resources) string
blueprint
    type Step struct
        -- New
        func NewGroupResourceStep(groupResource resourcesPkg.GroupResource) *Step
        func NewSingleResourceStep(singleResource resourcesPkg.SingleResource) *Step
        -- Type
        func (s *Step) AppendGroupResource(resource resourcesPkg.Resource)
        func (s *Step) DetailedString() string
        func (s *Step) IsGroupResource() bool
        func (s *Step) IsSingleResource() bool
        func (s *Step) Load(ctx context.Context, hst types.Host) (*Step, error)
        func (s *Step) MarshalYAML() (any, error)
        func (s *Step) MustGroupResource() resourcesPkg.GroupResource
        func (s *Step) Resolve(ctx context.Context, hst types.Host) error
        func (s *Step) Resources() resourcesPkg.Resources
        func (s *Step) String() string
        func (s *Step) Type() string
        func (s *Step) UnmarshalYAML(node *yaml.Node) error
    type Steps []*Step
        -- New
        func NewSteps(resources resourcesPkg.Resources) (Steps, error)
    type Blueprint struct
        -- Struct
       	Name  string
        Steps Steps
        -- New
        func NewBlueprintFromResources(name string, resources resourcesPkg.Resources) (*Blueprint, error)
        -- Type
        func (b *Blueprint) GetResourceWithSameTypeId(resource resourcesPkg.Resource) resourcesPkg.Resource
        func (b *Blueprint) HasResourceWithSameTypeId(resource resourcesPkg.Resource) bool
        func (b *Blueprint) Load(ctx context.Context, hst types.Host) (*Blueprint, error)
        func (b *Blueprint) Resolve(ctx context.Context, hst types.Host) error
        func (b *Blueprint) Resources() resourcesPkg.Resources
        func (b *Blueprint) Satisfies(otherBlueprint *Blueprint) diffPkg.Diff
        func (b *Blueprint) String() string
plan
    type ResourceDiff struct
        -- Struct
    	Emoji rune
    	Id string
    	Diff diffPkg.Diff
        -- New
        func NewResourceDiff(emoji rune, planResource resourcesPkg.Resource, diff diffPkg.Diff) *ResourceDiff
        -- Type
        func (r *ResourceDiff) String() string
    type Action struct
        -- Struct
        ResourceType string
        ResourceDiffs []*ResourceDiff
        ApplyResources resourcesPkg.Resources
        -- New
        func NewAction(step *blueprintPkg.Step, beforeResourceMap resourcesPkg.ResourceMap) *Action
        -- Type
        func (a *Action) Apply(ctx context.Context, host types.Host) error
        func (a *Action) DetailedString() string
        func (a *Action) DiffString() string
        func (a *Action) String() string
    type Plan []*Action
        -- New
        func CraftPlan(ctx context.Context, host types.Host, store storePkg.Store, ...) (Plan, *blueprintPkg.Blueprint, *blueprintPkg.Blueprint, error)
        -- Type
        func (p Plan) Apply(ctx context.Context, host types.Host) error
--
cmd
    apply
        -- Target Resources
        var targetResources resourcesPkg.Resources
        targetResources, err = resourcesPkg.LoadPath(ctx, path)
        -- Plan
        var plan planPkg.Plan
		var targetBlueprint *blueprintPkg.Blueprint
		var lastBlueprint *blueprintPkg.Blueprint
		plan, targetBlueprint, lastBlueprint, err = planPkg.CraftPlan(ctx, host, store, targetResources)
		    for resource in targetResources
				if !store.HasOriginalResource(ctx, resource)
				    resource.Load
					store.SaveOriginalResource(ctx, resource)
			TODO loadOrCreateAndSaveLastBlueprintWithValidation
			TODO compilePlan
		-- Save Target Blueprint
		store.SaveTargetBlueprint(ctx, targetBlueprint)
		-- Apply
		plan.Apply(ctx, host)
		-- State Cleanup
	    if targetResources does not have lastBlueprint resource
			store.DeleteOriginalResource(ctx, lastResource)
		store.SaveLastBlueprint(ctx, targetBlueprint)
		store.DeleteTargetBlueprint(ctx)
