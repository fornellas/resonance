resources/resource.go
    Resource interface
        GetResourceTypeNames() []string
        GetResourceByTypeName(name string) Resource
        ---
        Validate() error
        NewResourceWithSameId(resource Resource) Resource
        GetResourceId(resource Resource) string
        GetResourceTypeName(resource Resource) string
        GetResourceTypeId(resource Resource) string
        GetResourceYaml(resource Resource) string
        HashResource(resource Resource) string
        ValidateResource(resource Resource) error
        SetResourceAbsent(resource Resource) Resource
        GetResourceAbsent(resource Resource) bool
    Satisfiable interface
        Satisfies(resource Resource) bool
        Satisfies(a, b Resource) bool
    SingleResource interface
        RegisterSingleResource(singleResourceType reflect.Type)
        GetSingleResourceByTypeName(name string) SingleResource
        ---
       	Load(context.Context, types.Host) error
    	Resolve(context.Context, types.Host) error
    	Apply(context.Context, types.Host) error
    GroupResource interface
        RegisterGroupResource(resourceType, groupResourceType reflect.Type)
        GetGroupResourceByTypeName(name string) GroupResource
        IsGroupResource(name string) bool
        ---
    	Load(context.Context, types.Host, Resources) error
    	Resolve(context.Context, types.Host, Resources) error
    	Apply(context.Context, types.Host, Resources) error
        GetGroupResourceTypeName(groupResource GroupResource) string
resources/resources.go
    Resources []Resource
        GetResourcesYaml(resources Resources) string
        ---
        Ids() string
        Validate() error
        MarshalYAML() (interface{}, error)
        UnmarshalYAML(node *yaml.Node) error
        NewResourcesWithSameIds(resources Resources) Resources
internal/blueprint
    Blueprint
        Steps
    Steps []*Step
    Step
    	singleResource resourcesPkg.SingleResource
    	groupResource  resourcesPkg.GroupResource
    	groupResources resourcesPkg.Resources
    	requiredBy     Steps
internal/plan
    Plan []*Action
        crafted from
            target blueprint
            last blueprint
            original resource state
    Action
        ResourceType string
    	ResourceDiffs []*ResourceDiff
    	ApplyResources resourcesPkg.Resources

Apply
    iResouresPkg.LoadPath("resources.yaml")
        => targetResources []Resource
    planPkg.PrepAndPlan(ctx, host, store, targetResources)
        planPkg.CreateTargetBlueprint(ctx, host, targetResources)
            blueprintPkg.NewBlueprintFromResources(ctx, targetResources)
                blueprintPkg.NewSteps(targetResources)
                    => steps []Step
                => targetBlueprint Blueprint{Steps: steps}
            targetBlueprint.Resolve(ctx, host)
            => targetBlueprint Blueprint
        planPkg.SaveOriginalResourcesState(ctx, host, store, targetBlueprint)
            TODO
        lastBlueprint := LoadOrCreateAndSaveLastBlueprintWithValidation(
		  ctx, host, store, targetBlueprint,
		)
		  => lastBlueprint Blueprint
    	NewPlan(
    		ctx,
    		targetBlueprint,
    		lastBlueprint,
    		store.LoadOriginalResource,
    	)
            => Plan
        => plan, targetBlueprint, lastBlueprint
    if !store.HasTargetBlueprint(ctx)
        store.SaveTargetBlueprint(ctx, targetBlueprint)
    plan.Apply(ctx, host)

    TODO
